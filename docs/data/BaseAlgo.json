[{"function": "buy(self, symbol, quantity, in_force, extended)", "index": "buy", "short_description": "Buys the specified asset.", "long_description": "When called, a limit buy order is placed with a limit\nprice 5% higher than the current price.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of the asset to buy. ", "default": "first symbol in watchlist", "optional": true}, {"name": "quantity", "type": "float", "desc": "Quantity of asset to buy. ", "default": "buys as many as possible", "optional": true}, {"name": "in_force", "type": "str", "desc": "Duration the order is in force. '{gtc}' or '{gtd}'. ", "default": "'gtc'", "optional": true}, {"name": "extended", "type": "str", "desc": "Whether to trade in extended hours or not. ", "default": "False", "optional": true}], "returns": "The following Python dictionary\n- type: str, 'STOCK' or 'CRYPTO'\n- id: str, ID of order\n- symbol: str, symbol of asset", "raises": [{"type": "Exception", "desc": "There is an error in the order process."}]}, {"function": "buy_option(self, symbol, quantity, in_force)", "index": "buy_option", "short_description": "Buys the specified option.", "long_description": "When called, a limit buy order is placed with a limit\nprice 5% higher than the current price.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of the asset to buy, in {OCC} format", "default": null, "optional": false}, {"name": "quantity", "type": "float", "desc": "Quantity of asset to buy. ", "default": "buys as many as possible", "optional": true}, {"name": "in_force", "type": "str", "desc": "Duration the order is in force. '{gtc}' or '{gtd}'. ", "default": "'gtc'", "optional": true}], "returns": "A dictionary with the following keys:\n- type: 'OPTION'\n- id: ID of order\n- symbol: symbol of asset", "raises": [{"type": "Exception", "desc": "There is an error in the order process."}]}, {"function": "sell(self, symbol, quantity, in_force, extended)", "index": "sell", "short_description": "Sells the specified asset.", "long_description": "When called, a limit sell order is placed with a limit\nprice 5% lower than the current price.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of the asset to sell. ", "default": "first symbol in watchlist", "optional": true}, {"name": "quantity", "type": "float", "desc": "Quantity of asset to sell ", "default": "sells all", "optional": true}, {"name": "in_force", "type": "str", "desc": "Duration the order is in force. '{gtc}' or '{gtd}'. ", "default": "'gtc'", "optional": true}, {"name": "extended", "type": "str", "desc": "Whether to trade in extended hours or not. ", "default": "False", "optional": true}], "returns": "A dictionary with the following keys:\n- type: str, 'STOCK' or 'CRYPTO'\n- id: str, ID of order\n- symbol: str, symbol of asset", "raises": [{"type": "Exception", "desc": "There is an error in the order process."}]}, {"function": "sell_option(self, symbol, quantity, in_force)", "index": "sell_option", "short_description": "Sells the specified option.", "long_description": "When called, a limit sell order is placed with a limit\nprice 5% lower than the current price.\n\nIf the option symbol is specified, it will sell that option. If it is not, then the\nmethod will select the first stock symbol in the watchlist, and sell all options\nrelated to that stock.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of the asset to sell, in {OCC} format. ", "default": "sell all options for the first stock in watchlist", "optional": true}, {"name": "quantity", "type": "float", "desc": "Quantity of asset to sell. ", "default": "sells all", "optional": true}, {"name": "in_force", "type": "str", "desc": "Duration the order is in force. '{gtc}' or '{gtd}'. ", "default": "'gtc'", "optional": true}], "returns": "A dictionary with the following keys:\n- type: 'OPTION'\n- id: ID of order\n- symbol: symbol of asset", "raises": [{"type": "Exception", "desc": "There is an error in the order process."}]}, {"function": "get_option_market_data(self, symbol)", "index": "get_option_market_data", "short_description": "Retrieves data of specified option.", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "{OCC} symbol of optio", "default": null, "optional": true}], "returns": "A dictionary:\n- price: price of option\n- ask: ask price\n- bid: bid price", "raises": []}, {"function": "get_option_chain(self, symbol, date)", "index": "get_option_chain", "short_description": "Returns the option chain for the specified symbol and expiration date.", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "symbol of stoc", "default": null, "optional": false}, {"name": "date", "type": "dt.datetime", "desc": "date of option expiratio", "default": null, "optional": false}], "returns": "A dataframe with the follwing columns:\n- exp_date(datetime.datetime): The expiration date\n- strike(float): Strike price\n- type(str): 'call' or 'put'\n\nThe index is the {OCC} symbol of the option.\nNote that the expiration date is not adjusted to the local time zone.", "raises": []}, {"function": "get_option_chain_info(self, symbol)", "index": "get_option_chain_info", "short_description": "Returns metadata about a stock's option chain", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "symbol of stock. ", "default": "first symbol in watchlist", "optional": true}], "returns": "A dict with the following keys:\n- exp_dates: List of expiration dates, in the fomrat \"YYYY-MM-DD\"\n- multiplier: Multiplier of the option, usually 100", "raises": []}, {"function": "ema(self, symbol, period, interval, ref, prices)", "index": "ema", "short_description": "Calculate EMA", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol to perform calculation on. ", "default": "first symbol in watchlist", "optional": true}, {"name": "period", "type": "int", "desc": "Period of EMA. ", "default": "14", "optional": true}, {"name": "interval", "type": "str", "desc": "Interval to perform the calculation. ", "default": "interval of algorithm", "optional": true}, {"name": "ref", "type": "str", "desc": "'close', 'open', 'high', or 'low'. ", "default": "'close'", "optional": true}, {"name": "prices", "type": "list", "desc": "When specified, this function will use the values provided in the\nlist to perform calculations and ignore other parameters. ", "default": "None", "optional": true}], "returns": "A list in numpy format, containing EMA values", "raises": []}, {"function": "rsi(self, symbol, period, interval, ref, prices)", "index": "rsi", "short_description": "Calculate RSI", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol to perform calculation on. ", "default": "first symbol in watchlist", "optional": true}, {"name": "period", "type": "int", "desc": "Period of RSI. ", "default": "14", "optional": true}, {"name": "interval", "type": "str", "desc": "Interval to perform the calculation. ", "default": "interval of algorithm", "optional": true}, {"name": "ref", "type": "str", "desc": "'close', 'open', 'high', or 'low'. ", "default": "'close'", "optional": true}, {"name": "prices", "type": "list", "desc": "When specified, this function will use the values provided in the\nlist to perform calculations and ignore other parameters. ", "default": "None", "optional": true}], "returns": "A list in numpy format, containing RSI values", "raises": []}, {"function": "sma(self, symbol, period, interval, ref, prices)", "index": "sma", "short_description": "Calculate SMA", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol to perform calculation on. ", "default": "first symbol in watchlist", "optional": true}, {"name": "period", "type": "int", "desc": "Period of SMA. ", "default": "14", "optional": true}, {"name": "interval", "type": "str", "desc": "Interval to perform the calculation. ", "default": "interval of algorithm", "optional": true}, {"name": "ref", "type": "str", "desc": "'close', 'open', 'high', or 'low'. ", "default": "'close'", "optional": true}, {"name": "prices", "type": "list", "desc": "When specified, this function will use the values provided in the\nlist to perform calculations and ignore other parameters. ", "default": "None", "optional": true}], "returns": "A list in numpy format, containing SMA values", "raises": []}, {"function": "bbands(self, symbol, period, interval, ref, dev, prices)", "index": "bbands", "short_description": "Calculate Bollinger Bands", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol to perform calculation on. ", "default": "first symbol in watchlist", "optional": true}, {"name": "period", "type": "int", "desc": "Period of BBands. ", "default": "14", "optional": true}, {"name": "interval", "type": "str", "desc": "Interval to perform the calculation. ", "default": "interval of algorithm", "optional": true}, {"name": "ref", "type": "str", "desc": "'close', 'open', 'high', or 'low'. ", "default": "'close'", "optional": true}, {"name": "dev", "type": "float", "desc": "Standard deviation of the bands. ", "default": "1.0", "optional": true}, {"name": "prices", "type": "list", "desc": "When specified, this function will use the values provided in the\nlist to perform calculations and ignore other parameters. ", "default": "None", "optional": true}], "returns": "A tuple of numpy lists, each a list of BBand top, average, and bottom values", "raises": []}, {"function": "get_account_buying_power(self)", "index": "get_account_buying_power", "short_description": "Returns the current buying power of the user", "long_description": null, "params": [], "returns": "The current buying power as a float.", "raises": []}, {"function": "get_account_equity(self)", "index": "get_account_equity", "short_description": "Returns the current equity.", "long_description": null, "params": [], "returns": "The current equity as a float.", "raises": []}, {"function": "get_asset_candle(self, symbol)", "index": "get_asset_candle", "short_description": "Returns the most recent candle as a pandas DataFrame", "long_description": "This function is not compatible with options.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of stock or crypto asset. ", "default": "first symbol in watchlist", "optional": true}], "returns": "Price of asset as a dataframe with the following columns:\n    - open\n    - high\n    - low\n    - close\n    - volume\n\nThe index is a datetime object", "raises": [{"type": "Exception", "desc": "If symbol is not in the watchlist."}]}, {"function": "get_asset_candle_list(self, symbol)", "index": "get_asset_candle_list", "short_description": "Returns the candles of an asset as a pandas DataFrame", "long_description": "This function is not compatible with options.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of stock or crypto asset. ", "default": "first symbol in watchlist", "optional": true}], "returns": "Prices of asset as a dataframe with the following columns:\n    - open\n    - high\n    - low\n    - close\n    - volume\n\nThe index is a datetime object", "raises": [{"type": "Exception", "desc": "If symbol is not in the watchlist."}]}, {"function": "get_asset_cost(self, symbol)", "index": "get_asset_cost", "short_description": "Returns the average cost of a specified asset.", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol of asset. ", "default": "first symbol in watchlist", "optional": true}], "returns": "Average cost of asset. Returns None if asset is not being tracked.", "raises": [{"type": "Exception", "desc": "If symbol is not currently owned."}]}, {"function": "get_date(self)", "index": "get_date", "short_description": "Returns the current date.", "long_description": null, "params": [], "returns": "The current date as a datetime object", "raises": []}, {"function": "get_datetime(self)", "index": "get_datetime", "short_description": "Returns the current date and time.", "long_description": "This returns the current time, which is different from the timestamp\non a ticker. For example, if you are running an algorithm every 5 minutes,\nat 11:30am you will get a ticker for 11:25am. This function will return\n11:30am.", "params": [], "returns": "The current date and time as a datetime object", "raises": []}, {"function": "get_asset_price(self, symbol)", "index": "get_asset_price", "short_description": "Returns the current price of a specified asset.", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol of asset. ", "default": "first symbol in watchlist", "optional": true}], "returns": "Price of asset.", "raises": [{"type": "Exception", "desc": "If symbol is not in the watchlist."}]}, {"function": "get_asset_price_list(self, symbol, interval, ref)", "index": "get_asset_price_list", "short_description": "Returns a list of recent prices for an asset.", "long_description": "This function is not compatible with options.", "params": [{"name": "symbol", "type": "str", "desc": "Symbol of stock or crypto asset. ", "default": "first symbol in watchlist", "optional": true}, {"name": "interval", "type": "str", "desc": "Interval of data. ", "default": "the interval of the algorithm", "optional": true}, {"name": "ref", "type": "str", "desc": "'close', 'open', 'high', or 'low'. ", "default": "'close'", "optional": true}], "returns": "List of prices", "raises": []}, {"function": "get_asset_quantity(self, symbol)", "index": "get_asset_quantity", "short_description": "Returns the quantity owned of a specified asset.", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol of asset. ", "default": "first symbol in watchlist", "optional": true}], "returns": "Quantity of asset as float. 0 if quantity is not owned.", "raises": [{"type": null, "desc": ""}]}, {"function": "get_asset_returns(self, symbol)", "index": "get_asset_returns", "short_description": "Returns the return of a specified asset.", "long_description": null, "params": [{"name": "symbol", "type": "str", "desc": "Symbol of stock, crypto, or option. Options should be in {OCC} format.\n", "default": "first symbol in watchlist", "optional": true}], "returns": "Return of asset, expressed as a decimal.", "raises": []}, {"function": "get_time(self)", "index": "get_time", "short_description": "Returns the current hour and minute.", "long_description": "This returns the current time, which is different from the timestamp\non a ticker. For example, if you are running an algorithm every 5 minutes,\nat 11:30am you will get a ticker for 11:25am. This function will return\n11:30am.", "params": [], "returns": "The current time as a datetime object", "raises": []}]